// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main renders correctly with fetching 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    error=""
    fetching={true}
    onFilmClick={[Function]}
    results={
      Array [
        Object {
          "id": 1,
          "title": "A",
        },
        Object {
          "id": 2,
          "title": "B",
        },
      ]
    }
    searchType="title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="container"
      >
        <Loading
          className=""
          color="#000"
          delay={0}
          height={64}
          type="bars"
          width={64}
        />
      </div>,
      "id": "main",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": <Loading
          className=""
          color="#000"
          delay={0}
          height={64}
          type="bars"
          width={64}
        />,
        "className": "container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "className": "",
          "color": "#000",
          "delay": 0,
          "height": 64,
          "type": "bars",
          "width": 64,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="container"
        >
          <Loading
            className=""
            color="#000"
            delay={0}
            height={64}
            type="bars"
            width={64}
          />
        </div>,
        "id": "main",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": <Loading
            className=""
            color="#000"
            delay={0}
            height={64}
            type="bars"
            width={64}
          />,
          "className": "container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "className": "",
            "color": "#000",
            "delay": 0,
            "height": 64,
            "type": "bars",
            "width": 64,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Main renders correctly with props 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    error=""
    fetching={false}
    onFilmClick={[Function]}
    results={
      Array [
        Object {
          "id": 1,
          "title": "A",
        },
        Object {
          "id": 2,
          "title": "B",
        },
      ]
    }
    searchType="title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="container"
      >
        <Film
          film={
            Object {
              "id": 1,
              "title": "A",
            }
          }
        />
        <Film
          film={
            Object {
              "id": 2,
              "title": "B",
            }
          }
        />
      </div>,
      "id": "main",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Film
            film={
              Object {
                "id": 1,
                "title": "A",
              }
            }
          />,
          <Film
            film={
              Object {
                "id": 2,
                "title": "B",
              }
            }
          />,
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "function",
          "props": Object {
            "film": Object {
              "id": 1,
              "title": "A",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "function",
          "props": Object {
            "film": Object {
              "id": 2,
              "title": "B",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="container"
        >
          <Film
            film={
              Object {
                "id": 1,
                "title": "A",
              }
            }
          />
          <Film
            film={
              Object {
                "id": 2,
                "title": "B",
              }
            }
          />
        </div>,
        "id": "main",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Film
              film={
                Object {
                  "id": 1,
                  "title": "A",
                }
              }
            />,
            <Film
              film={
                Object {
                  "id": 2,
                  "title": "B",
                }
              }
            />,
          ],
          "className": "container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "function",
            "props": Object {
              "film": Object {
                "id": 1,
                "title": "A",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "function",
            "props": Object {
              "film": Object {
                "id": 2,
                "title": "B",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Main renders correctly without results 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    error=""
    fetching={false}
    onFilmClick={[Function]}
    results={Array []}
    searchType="title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "function",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Main renders correctly without searchType 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    error=""
    fetching={false}
    onFilmClick={[Function]}
    results={
      Array [
        Object {
          "id": 1,
          "title": "A",
        },
        Object {
          "id": 2,
          "title": "B",
        },
      ]
    }
    searchType=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="container"
      />,
      "id": "main",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          null,
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        null,
        null,
      ],
      "type": "div",
    },
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="container"
        />,
        "id": "main",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            null,
            null,
          ],
          "className": "container",
        },
        "ref": null,
        "rendered": Array [
          null,
          null,
        ],
        "type": "div",
      },
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
